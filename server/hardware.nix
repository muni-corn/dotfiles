# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  ...
}:
{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot = {
    extraModulePackages = [ ];
    initrd = {
      availableKernelModules = [
        "vmd"
        "xhci_pci"
        "ahci"
        "nvme"
        "usb_storage"
        "usbhid"
        "sd_mod"
      ];
      luks.devices =
        let
          mkEncryptedDrive = uuid: {
            device = "/dev/disk/by-uuid/${uuid}";
            keyFile = "/dev/disk/by-id/usb-USB_SanDisk_3.2Gen1_0401b0939440ba268e5a0c2ea2676c15e102936862ea7b55613f4481be4c3395ceb7000000000000000000001469fd21009b641883558107133040cd-0:0";
            keyFileSize = 4096;
          };
        in
        {
          cryptcrypt1 = mkEncryptedDrive "097e6ba4-5f5b-4b6b-8c35-8061b7100ce0";
          cryptcrypt2 = mkEncryptedDrive "8ba32d27-9352-467c-a2a7-3151c3ce6a25";
          cryptcrypt3 = mkEncryptedDrive "491c21ae-7000-4c01-ba53-3f143922f67d";
          cryptcrypt4 = mkEncryptedDrive "60ec9031-347a-4fcc-949e-d1b66d72f55c";
          cryptmain = mkEncryptedDrive "caf0cc37-432e-418f-bf1a-6df102875662";
          cryptmain1 = mkEncryptedDrive "0d49fc53-fe4f-4500-a085-1847ab90e351";
        };
    };
    kernelModules = [ "kvm-intel" ];
  };

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/0601e2c9-f445-4a4f-b656-281ae21c9b8c";
      fsType = "btrfs";
      options = [ "compress=zstd" ];
    };

    "/home" = {
      device = "/dev/disk/by-uuid/0601e2c9-f445-4a4f-b656-281ae21c9b8c";
      fsType = "btrfs";
      options = [
        "compress=zstd"
        "subvol=home"
      ];
    };

    "/nix" = {
      device = "/dev/disk/by-uuid/0601e2c9-f445-4a4f-b656-281ae21c9b8c";
      fsType = "btrfs";
      options = [
        "compress=zstd"
        "noatime"
        "subvol=nix"
      ];
    };

    "/root" = {
      device = "/dev/disk/by-uuid/0601e2c9-f445-4a4f-b656-281ae21c9b8c";
      fsType = "btrfs";
      options = [
        "compress=zstd"
        "subvol=root"
      ];
    };

    "/var" = {
      device = "/dev/disk/by-uuid/0601e2c9-f445-4a4f-b656-281ae21c9b8c";
      fsType = "btrfs";
      options = [
        "compress=zstd"
        "subvol=var"
      ];
    };

    "/boot" = {
      device = "/dev/disk/by-uuid/22A9-1AE7";
      fsType = "vfat";
    };

    "/crypt" = {
      device = "/dev/disk/by-uuid/90072e03-ea6e-414d-86cd-a36aa6a114fe";
      fsType = "btrfs";
      options = [
        "compress=zstd"
        "noatime"
      ];
    };
  };

  swapDevices = [ { device = "/dev/disk/by-uuid/09992ab3-66b5-4cb5-8992-f05aa36b2e9c"; } ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking = {
    useDHCP = lib.mkDefault true;
    interfaces = {
      enp4s0.useDHCP = lib.mkDefault true;
      wlan0.useDHCP = lib.mkDefault true;
    };
  };

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware = {
    graphics.enable = true;
    cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    nvidia = {
      modesetting.enable = true;
      open = true;
      prime = {
        intelBusId = "PCI:0:2:0";
        nvidiaBusId = "PCI:1:0:0";
        offload = {
          enable = true;
          enableOffloadCmd = true;
        };
      };
    };
  };
}
